### Second Wind - Implementation Plan

**Development Overview:**
- 12 phases over 13 weeks
- Phase-by-phase tracking for session continuity
- Each phase builds on the previous to ensure stable progression
- **Pure C++ Implementation:** No visual scripting/Blueprints for gameplay
- **SINGLE-PLAYER ONLY:** No multiplayer, networking, or replication code
- **NO GAS:** Do NOT use Gameplay Ability System - implement all abilities with simple C++ components
- **UI System:** All UI implemented in C++ using Slate framework
- **Blueprints:** Only for asset references and minimal configuration

**Current Status:** Phase 10 - Animation System 🚧 IN PROGRESS
**Previous:** Phase 9 - Memory System Revisit & Economy ✅ COMPLETED
**Prior Milestone:** Phase 8 - Gamestyle System (Automatic Run Upgrades) ✅ COMPLETED
**Next Session:** Continue Phase 10 - Animation System implementation

=============================================================================

### PHASE 1: COMBAT FOUNDATION (Week 1-2)
**Priority:** CRITICAL - Core Gameplay
**Status:** ✅ COMPLETED

**Goals:**
- Basic attack system working
- Health system functional
- Training dummy for testing
- Player movement adjusted to game requirements

**Tasks:**
1. [✅] Modify ASecondWindCharacter
   - Set MaxWalkSpeed to 300 (currently 500)
   - Remove jump functionality completely
   - Add basic attack input binding (LMB -> IA_Attack)
   - Ensure character faces enemy after animations

2. [✅] Create UCombatComponent
   - Basic attack function (5 base damage)
   - Animation-based cooldown system
   - Hit detection and damage application
   - Integration with character class

3. [✅] Create UHealthComponent
   - 100 HP base system
   - 2-phase player health system
   - Damage interface for receiving hits
   - Death/phase transition logic

4. [✅] Create ATrainingDummy (extends ACharacter)
   - 100 HP, 2 phases structure
   - Basic hit reaction animations (simple initially)
   - Auto-respawn on death functionality
   - Placeholder combat responses
   - Complex training behaviors added later

**Deliverable:** Player can attack training dummy with functional health/damage system
**Testing:** Player attacks reduce dummy health, dummy dies and respawns after 2 phases

=============================================================================

### PHASE 2: BLOCKING SYSTEM (Week 3)
**Priority:** HIGH - Core Combat Mechanic
**Status:** ✅ COMPLETED

**Goals:**
- Directional blocking fully functional
- Mouse delta system working
- Counter-attack windows implemented
- Block animations integrated

**Tasks:**
1. [✅] Create UBlockingComponent
   - RMB hold detection and state management
   - Horizontal mouse delta tracking (1D axis only, vertical ignored)
   - Block direction states (Front/Left/Right) based on horizontal zones
   - 40% damage reduction calculation (no parry system)
   - Block zone threshold adjusted to 0.5 for better center detection

2. [✅] Enhanced Input Integration
   - Create IA_Block input action
   - Mouse horizontal axis for block control (camera stays centered on enemy)
   - Block direction change with horizontal mouse movements only
   - Input buffer system ready for implementation

3. [✅] Counter-Attack System Foundation
   - 0.5 second counter-attack windows
   - Counter window triggers after successful block
   - Visual feedback with debug spheres
   - Integrated with HealthComponent for damage reduction
   - Foundation for hack meter tracking

**Deliverable:** Functional directional blocking with successful counter-attacks
**Testing:** Player can block attacks from different directions and counter-attack

=============================================================================

### PHASE 3: DODGE & MOVEMENT (Week 4)
**Priority:** HIGH - Core Combat Mechanic
**Status:** ✅ COMPLETED

**Goals:**
- Strategic dodge system complete
- Camera lock-on basic functionality
- Strafe movement during combat
- Complete combat triangle (Attack/Block/Dodge)

**Tasks:**
1. [✅] Strategic Dodge Implementation
   - A/S/D hold (0.1s) + Space input combinations
   - Dodge direction logic (left/back/right)
   - Animation-driven movement (no code distance)
   - Counter-attack windows after successful dodges
   - Weak side bonus damage for proper positioning

2. [✅] Camera Lock-On Foundation
   - Create UCameraLockOnComponent
   - Auto-targeting logic within 1500 unit range (1v1 only)
   - No manual toggle or lock break (arena combat design)
   - Strafe movement when locked onto target
   - Character auto-facing enemy with animation exceptions
   - Camera lag for smooth dodge following

3. [✅] Movement System Integration
   - Modify WASD behavior during lock-on
   - A/D becomes strafe/circle movement
   - Seamless transition between free/locked movement

**Deliverable:** Complete basic combat mechanics (Attack/Block/Dodge/Lock-on)
**Testing:** All three combat options work together fluidly

=============================================================================

### PHASE 4: ADVANCED COMBAT (Week 5)
**Priority:** MEDIUM - Enhanced Combat
**Status:** ✅ COMPLETED

**Goals:**
- Dash attack system functional ✓
- Hack attack fully implemented ✓
- Counter-attack tracking system ✓
- Complete combat moveset ✓

**Tasks:**
1. [✅] Dash Attack System
   - W + Space dash input detection
   - Forward dash movement (using DodgeComponent)
   - Optional LMB leap attack during dash window
   - Basic implementation without animations

2. [✅] Hack Attack Implementation
   - Counter-attack tracking system (6-count)
   - Reset logic on 2 unblocked hits (blocked don't count)
   - Massive damage (50) + stun placeholder
   - Visual/audio feedback for hack availability
   - UI debug display (cyan progress indicators)
   - Counter-attacks require LMB during counter windows

**Deliverable:** Full combat moveset with all special abilities
**Testing:** Hack attack becomes available after 6 counters, resets properly

=============================================================================

### PHASE 5A: ARENA SYSTEM - BASIC (Week 6)
**Priority:** HIGH - Game Structure
**Status:** ✅ COMPLETED

**Goals:**
- Game mode and progression structure
- Arena transition system
- Enemy base class with phases
- Fragment earning system

**Tasks:**
1. [✅] Game Mode Implementation
   - Create ASecondWindArenaGameMode (extends AGameModeBase)
   - Arena progression logic and state management
   - Safe zone and training area management

2. [✅] Arena Management System
   - Create AArenaManager for transitions
   - Arena 1-5 basic setup (identical layouts)
   - Safe zone between arenas functionality

3. [✅] Enemy Base Class
   - Create AArenaEnemy (extends ACharacter)
   - Phase system implementation (1-5 phases per arena)
   - Health scaling and phase transitions (100 HP reset)
   - Finisher system with forced waiting animations
   - Glowing weak side visual indicators (placeholder)

4. [✅] Fragment System Foundation
   - Finisher-based fragment earning calculation
   - Cumulative phase rewards (1+2+3+4 = 10 for 4-phase enemy)
   - Fragment counting and persistence preparation

**Deliverable:** Working arena progression with basic enemy system
**Testing:** Can progress through arenas, earn fragments from finishers

=============================================================================

### PHASE 5B: PHYSICAL ROOM SYSTEM (Week 6-7)
**Priority:** HIGH - Enhanced Game Structure
**Status:** ✅ COMPLETED

**Goals:**
- Physical room-based progression (no teleporting)
- Proximity-based door interactions (2-second hold)
- Simple linear progression through connected spaces
- Safe zone corridors as marketplaces between arenas

**Refactoring Tasks:**
1. [✅] Remove Phase 5A Placeholder Code
   - Removed teleportation logic from ArenaManager
   - Removed debug keys (1 and 2) for arena transitions
   - Simplified GameMode (no complex state management)
   - Removed spawn/despawn location arrays
   - Kept only: FragmentComponent, ArenaEnemy base class

**New Implementation Tasks:**
2. [✅] Arena Door System
   - Created AArenaDoor (interactive door with proximity detection)
   - 2-second proximity requirement implemented
   - Door opening sequence working
   - Combat-locked exit doors (must defeat enemy)
   - Door type system (ArenaEntry, ArenaExit, SafeZone)

3. [✅] Safe Zone Corridors
   - Created ASafeZoneCorridor (marketplace hallways)
   - Healing to full health on entry
   - Linear corridor design between arenas
   - No combat in corridors

4. [✅] Physical Level Layout
   - SimplifiedArenaSystem spawns rooms dynamically
   - Starting Hub (training dummy) → Door 1 → Arena 1 → etc.
   - Each room physically exists (no teleporting)
   - Clear progression flow
   - Doors lock/unlock based on combat state

5. [✅] Simplified Enemy Management
   - Only one arena enemy exists at a time
   - Current enemy spawns when entering arena
   - Previous enemy despawns automatically
   - No complex respawn logic
   - Enemy tied to specific arena room

**Key Simplifications from 5A:**
- No teleportation (walk everywhere)
- No complex state machines (proximity triggers handle flow)
- Single enemy at a time (no multi-enemy management)
- Linear progression (no backtracking complexity)
- Physical space tells the story (no abstract systems)

**Deliverable:** Clean, physical room-based progression ✅ DELIVERED
**Testing:** Walk to door → Wait 2 seconds → Door opens → Enter arena → Defeat enemy → Walk to safe zone → Get healed → Continue

=============================================================================

### PHASE 5C: PRE-PLACED LEVEL DESIGN SYSTEM (Week 7)
**Priority:** HIGH - Professional Level Design
**Status:** ✅ COMPLETED

**Goals:**
- Transform runtime-spawned system to editor-placed geometry
- Full visual control over level layout in Unreal Editor
- Discovery-based management (find pre-placed actors)
- Support for non-linear level designs
- Maintain all Phase 5B functionality

**New Classes to Create:**
1. [✅] AArenaZone
   - Defines combat area boundaries
   - Zone number and name properties
   - References to entry/exit doors
   - Enemy spawn point management
   - Combat state tracking

2. [✅] AEnemySpawnPoint
   - Visual spawn location markers
   - Enemy type selection
   - Phase count override option
   - Training dummy flag
   - Rotation control

3. [✅] ALevelLayoutManager (Replaces SimplifiedArenaSystem)
   - Discovers all pre-placed actors on BeginPlay
   - Manages enemy spawning only (no geometry spawning)
   - Tracks arena progression
   - Updates door states based on combat
   - Validates level setup

**Implementation Tasks:**
1. [✅] Discovery System
   - Find all ArenaZones in level
   - Find all EnemySpawnPoints
   - Find all Doors and Corridors
   - Link components together
   - Validate connections

2. [✅] Zone Management
   - Player overlap detection
   - Zone activation/deactivation
   - Combat state per zone
   - Door state updates

3. [✅] Spawn Point System
   - Spawn enemies at designated points
   - Clear spawn points on zone change
   - Support multiple enemy types
   - Respawn training dummy

**Level Design Workflow:**
1. Place ALevelLayoutManager in level
2. Place AArenaZone actors for each combat area
3. Scale zone bounds to desired size
4. Place AEnemySpawnPoint inside each zone
5. Place AArenaDoor actors between zones
6. Place ASafeZoneCorridor actors
7. Link references in editor
8. Test progression

**Benefits:**
- Visual level design in editor
- Custom arena shapes and sizes
- Non-linear progression possible
- Easy testing and iteration
- Professional workflow

**Deliverable:** Editor-friendly level design system
**Testing:** Place actors in editor → Play in editor → System discovers layout → Combat and progression work

**See Phase5C_Plan.md for detailed implementation guide**

=============================================================================

### PHASE 6: MEMORY SYSTEM (Week 8)
**Priority:** MEDIUM - Meta Progression
**Status:** ✅ COMPLETED

**Goals:**
- Save/load system working
- Memory unlock interface
- First memory implemented
- Persistence between sessions

**Tasks:**
1. [✅] Save/Load Infrastructure
   - Create UFragmentSystem (UGameInstanceSubsystem)
   - Create UMemorySystem (UGameInstanceSubsystem)
   - Session-based persistence only (NO disk saves by design)
   - Roguelike run system (all progress lost on game close)

2. [✅] Memory System Implementation
   - Memory unlock validation system
   - Gameplay effect application framework
   - Safe zone memory spending interface
   - Three memories implemented:
     • (Old memories removed - incompatible with new upgrade system)

3. [✅] Roguelike Session System
   - Run resets on player death (3s delay → respawn at hub)
   - Fragments and memories persist between runs (same session)
   - All progress lost when game closes (intentional design)

**Deliverable:** Working memory system with three memories implemented
**Testing:** Can spend fragments to unlock memories, effects persist between runs (same session only)

=============================================================================

### PHASE 7: UI & POLISH (Week 8)
**Priority:** MEDIUM - User Experience
**Status:** ✅ COMPLETED

**Goals:**
- Combat UI implemented ✅
- Basic Slate UI systems ✅
- UI feedback for all mechanics ✅

**Tasks:**
1. [✅] Core Combat UI (Pure C++ Slate)
   - Enemy health bar (top, wide design) - Slate widget ✅
   - Player health bar (bottom-left) - Slate widget ✅
   - Phase indicators for both player and enemy - Slate ✅
   - Fragment counter display - Slate widget ✅
   - Damage numbers below health bar (Elden Ring style) - Slate ✅
   - Counter-attack arrows (left-center, cyan/red states) - Slate ✅
   - Hack meter proper UI (replace debug display) ✅

2. [✅] UI State Management
   - Combat HUD fully functional ✅
   - Memory shop interface (Phase 6) ✅
   - Real-time UI updates ✅
   - All combat UI elements tested ✅

**Deliverable:** Complete UI system with all necessary screens ✅
**Testing:** All UI elements display correctly and update in real-time ✅

=============================================================================

### PHASE 8: GAMESTYLE SYSTEM (AUTOMATIC RUN UPGRADES) (Week 9)
**Priority:** HIGH - Core Roguelike Mechanic
**Status:** ⏳ IN PROGRESS

**Goals:**
- Random gamestyle assigned at start of each run (no player choice)
- Automatic progression with each arena enemy defeat
- 5 distinct gamestyles with unique progression paths
- All bonuses lost on death (roguelike)
- Clear UI feedback showing current style and progression

**Tasks:**
1. [ ] Create Gamestyle Infrastructure
   - Create UGamestyleComponent (player component)
   - Random gamestyle selection at Starting Hub spawn
   - Track stack count (number of upgrades earned)
   - Reset all bonuses on death/run reset
   - Hook into arena enemy death events (exclude training dummies)

2. [ ] Implement Defense Gamestyle
   - +20 max HP per arena completion
   - Smart healing (proportional HP increase: 60/100 → 80/120)
   - Modify HealthComponent for dynamic max HP
   - Test progression: 100 → 120 → 140 → 160 → 180+ HP

3. [ ] Implement Offense Gamestyle
   - +10 attack damage per arena completion
   - Modify CombatComponent damage calculation
   - Test progression: 5 → 15 → 25 → 35 → 45+ damage

4. [ ] Implement Mobility Gamestyle
   - -0.1s ability casting/recovery time per arena completion
   - Reduce attack recovery time
   - Reduce block activation delay
   - Reduce dodge execution time
   - Note: Full animation speed increases in Phase 10

5. [ ] Implement Utility Gamestyle
   - +0.1s counter window duration per arena completion
   - Modify BlockingComponent counter windows
   - Test progression: 0.5s → 0.6s → 0.7s → 0.8s → 0.9s+ windows

6. [ ] Implement Technomancer Gamestyle
   - -1 hack counter requirement per arena completion
   - Modify HackComponent counter tracking
   - Test progression: 6 → 5 → 4 → 3 → 2 → 1 counters needed

7. [ ] Create Gamestyle UI (Pure Slate)
   - Display current gamestyle name (e.g., "DEFENSE RUN")
   - Show stack count (e.g., "+3 UPGRADES")
   - Position: Top-left below fragment counter
   - Real-time updates on upgrade
   - Match existing combat HUD aesthetic

8. [ ] Integration & Testing
   - Connect to ArenaZone OnEnemyDefeated events
   - Ensure training dummies don't trigger upgrades
   - Test all gamestyles through multiple arenas
   - Verify proper reset on death
   - Balance upgrade values through playtesting
   - Test memory + gamestyle interactions

**Deliverable:** Complete gamestyle system with 5 distinct progression paths
**Testing:** Random assignment works, upgrades stack properly, training dummies excluded, full reset on death

=============================================================================

### PHASE 9: MEMORY SYSTEM REVISIT & ECONOMY (Week 10)
**Priority:** HIGH - Meta Progression Balance
**Status:** ✅ COMPLETED (Week 10 wrap)

**Goals:**
- Revisit and expand memory system
- Balance fragment economy and rewards
- Implement proper fragment distribution
- Add more memory options
- Polish shop experience

**Tasks:**
1. [✅] Fragment Economy Balancing
   - Phase-based rewards: phase number = fragments earned
   - Arena progression: 1, 3, 6, 10, 15 fragments total
   - Skill bonuses: +1 no-hit, +1 quick kill (2s for testing)
   - Tactical Analysis costs 7 fragments (~4 runs to unlock)
   - Economy validated against target progression curve

2. [✅] Expand Memory Options
   - [✅] Tactical Analysis (Weak Side Detection) - 1.5x damage + knockback
   - [✅] Designed and implemented additional combat/support memories (see MemorySystem.cpp)
   - Established memory tiers (basic/advanced) with unlock ordering
   - Introduced prerequisites and synergy notes for future balancing

3. [✅] Memory Shop Improvements
   - Enhanced UI with memory descriptions and effect callouts
   - Purchase confirmation flow and active memory list integrated
   - Refund posture documented (not required for v1 launch)

4. [✅] Fragment Reward System
   - No-damage kill bonus: +1 fragment
   - Quick kill bonus: +1 fragment (under 2s for testing, 30s normal)
   - Bonuses stack for +2 maximum per enemy
   - Phase-based distribution prevents farming

**Memory Implementation Status:**
✅ Implemented:
- Tactical Analysis: Reveals enemy weak points (1.5x damage + knockback) - 7 fragments
- Expanded memory roster covering economy, defensive, and utility perks (see MemorySystem.cpp)

**Deliverable:** Memory progression loop finalized with balanced fragment economy and polished shop UX
**Testing:** Full run economics feel rewarding; shop showcases new memories and activation feedback

=============================================================================

### PHASE 10: ANIMATION SYSTEM (Week 11)
**Priority:** HIGH - Visual Polish
**Status:** 🚧 IN PROGRESS

**Goals:**
- Hybrid physics-animation system for dynamic combat feel
- Minimal animation requirements with procedural reactions
- Smooth, responsive combat (Sifu/Sekiro style)
- Clear visual communication of combat states

**Architecture Decision:** Physics-Based Hit Reaction System
- Use Unreal's Physical Animation Component for procedural hit reactions
- Reduces animation count by 80% (physics generates variations)
- Integrates perfectly with existing damage/weak side/knockback systems
- Provides unlimited reaction variations from single base animations

**Tasks:**
1. [ ] Core Animation Framework
   - Create UAnimationComponent for centralized animation management
   - Implement UPhysicsHitReactionComponent for procedural reactions
   - Set up Physical Animation profiles (upper body physics, lower body animated)
   - Configure bone-specific physics responses

2. [ ] Required Animation Assets (Minimal Set - 15 total)
   PLAYER ANIMATIONS:
   - [ ] 3 Attack animations (left/right/overhead swings)
   - [ ] 3 Block poses (left/center/right - critical for directional blocking clarity)
   - [ ] 3 Dodge animations (left/right/back sidesteps)
   - [ ] 1 Dash animation (forward lunge)
   - [ ] 1 Hack cast animation (ranged ability)
   - [ ] 1 Hack response animation (enemy receives hack)
   - [ ] 1 Stagger base (physics modifies for all hit reactions)
   - [ ] 2 Finisher animations (execute + receive)

   ENEMY ANIMATIONS:
   - [ ] Use same set with enemy-specific timing variations
   - [ ] Add clear attack telegraphs (0.3-0.5s wind-ups)

3. [ ] Physics Integration
   - Configure impulse strengths:
     * Normal hit: 500 units
     * Heavy/weak side hit: 1500 units (1.5x damage visual feedback)
     * Blocked hit: 200 units (minimal wobble)
     * Hack ability: Head bone impulse + response animation
   - Blend timings:
     * 0-0.2s: Physics takeover
     * 0.2-0.4s: Blend back to animation
     * 0.4s+: Full animation control
   - Gamestyle modifiers:
     * Defense: Reduces impulse by 10% per stack
     * Mobility: Faster recovery blend by 5% per stack

4. [ ] Animation Notify System
   - AttackHitbox_Start/End (damage window control)
   - CounterWindow_Start/End (opportunity windows)
   - Movement_Lock/Unlock (root motion control)
   - Effect_Spawn (VFX/SFX timing)
   - PhysicsImpulse_Apply (hit reaction triggers)

5. [ ] Special Systems
   - [ ] Hack Ability Integration:
     * Cast animation plays on attacker
     * Apply head bone physics impulse to target
     * Play hack response animation on enemy
     * Creates "psychic attack" visual effect
   - [ ] Block Direction Blending:
     * Smooth transitions between 3 block poses
     * Real-time blend based on mouse position
     * 0.15s blend time for responsive feel
   - [ ] Animation Canceling:
     * Dodge/block can cancel attacks
     * Priority system for animation overrides
     * Input buffer for queued actions

**Technical Implementation:**
```cpp
// Core component structure
class UPhysicsHitReactionComponent : public UActorComponent
{
    // Impulse strengths for different hit types
    float LightHitImpulse = 500.0f;
    float HeavyHitImpulse = 1500.0f;
    float BlockedImpulse = 200.0f;
    float HackHeadImpulse = 2000.0f;  // Special for hack ability

    // Apply targeted physics for hack
    void ApplyHackReaction(AActor* Target)
    {
        // Apply impulse to head bone
        PhysicalAnimation->ApplyPhysicalAnimationForce(
            "head",
            FVector::UpVector * HackHeadImpulse
        );
        // Play hack response animation
        Target->PlayAnimMontage(HackResponseMontage);
    }
};
```

**Performance Optimizations:**
- LOD system: Full physics (close), simplified (medium), animation-only (far)
- Bone limits: 5-10 bones max per character
- Smart activation: Physics only during combat

**Testing Metrics:**
- Attack-to-hit: <200ms response time
- Enemy telegraphs: 300-500ms clear wind-ups
- Blend transitions: <100ms for snappy feel
- Counter windows: Visually match animation frames

**Deliverable:** Hybrid physics-animation combat system with minimal asset requirements
**Testing:** All animations play correctly with proper timing

=============================================================================

### PHASE 11: SFX & VFX (Week 12)
**Priority:** MEDIUM - Audio/Visual Polish
**Status:** PENDING

**Goals:**
- Complete audio implementation
- Visual effects for all actions
- Game feel enhancement

**Tasks:**
1. [ ] Sound Effects
   - Combat sounds (sword hits, blocks, dodges)
   - Counter-attack audio cues
   - Hack attack charging and execution
   - UI feedback sounds
   - Phase transition audio
   - Ambient arena sounds

2. [ ] Visual Effects
   - Hit impacts and sparks
   - Blood/damage effects
   - Counter-attack window visual indicators
   - Block direction visual feedback
   - Hack attack visual buildup and execution
   - Dodge trails and dash effects
   - Phase transition effects

3. [ ] Game Feel
   - Screen shake on heavy hits
   - Hit pause for impactful attacks
   - Slow motion for counter-attacks
   - Camera effects for special moments

**Deliverable:** Complete audio-visual experience
**Testing:** All effects trigger correctly without performance issues

=============================================================================

### PHASE 12: ENEMY AI (Week 13)
**Priority:** HIGH - Core Gameplay
**Status:** PENDING

**Goals:**
- Intelligent enemy behavior
- Challenging combat encounters
- Phase-based AI changes

**Tasks:**
1. [ ] AI Behavior System
   - State machine for combat decisions
   - Attack pattern selection
   - Player action reading and response
   - Distance management
   - Defensive behavior (blocking, dodging)

2. [ ] Attack Patterns
   - 3-hit combo variations
   - Heavy attack mixups
   - Feint system (start attack, then cancel)
   - Delayed attacks to catch dodges
   - Punish patterns for player mistakes

3. [ ] Phase-Based Behaviors
   - Phase 1: Basic attacks, slow reactions
   - Phase 2: Faster attacks, occasional feints
   - Phase 3: Combo chains, defensive options
   - Phase 4: Aggressive mixups, punish attempts
   - Phase 5: Full moveset, unpredictable patterns

4. [ ] Difficulty Scaling
   - Per-arena AI improvements
   - Reaction time adjustments
   - Attack frequency changes
   - Defense usage probability

**Deliverable:** Challenging and fair enemy AI system
**Testing:** AI provides appropriate challenge without feeling unfair

=============================================================================

### SESSION TRACKING:
**Current Phase:** 9
**Next Tasks:** Kick off Phase 10 - Animation System polish (retarget montages, add gameplay notifies)
**Completion Status:** 9/12 phases complete (Phase 10 in progress)

### NOTES FOR NEXT SESSION:
- Phase 1-8 complete: Combat, Blocking, Dodge/Movement, Special Abilities, Arena System (5A/5B/5C), Memory System, UI & Polish, Gamestyle System
- Critical fixes completed during Phase 7 (all roguelike reset issues resolved)
- Phase 8 completed: Gamestyle System (automatic run upgrades that stack with kills, 5 styles)
- Phase 9 COMPLETED: Memory System Revisit & Economy
  - ✅ Tactical Analysis memory (weak side detection) - 1.5x damage + knockback
  - ✅ Additional combat and utility memories shipped (see MemorySystem.cpp)
  - ✅ Shop UX updated with descriptions, confirmations, and active loadout summary
  - ✅ Fragment economy tuned: phase rewards + skill bonuses validated across test runs
- Phase 10 planned: Animation System
- Phase 11 planned: SFX & VFX
- Phase 12 planned: Enemy AI
- Key distinction: Memories are permanent upgrades (purchased with fragments, session-based only)
- Gamestyles are temporary upgrades (random assignment, stack with kills, lost on death)
- Total of 12 phases with reorganized priorities

### CRITICAL FIXES COMPLETED (During Phase 7):
- Fixed zone reset after player death
- Fixed enemy respawn in cleared zones
- Added enemy despawn/cleanup (2s delay)
- Fixed Zone 0 hub combat triggering
- Simplified zone activation logic
- Fixed combat flag persistence
- Ensured proper roguelike behavior
