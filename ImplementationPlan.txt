### Second Wind - Implementation Plan

**Development Overview:**
- 8 phases over 11 weeks
- Phase-by-phase tracking for session continuity
- Each phase builds on the previous to ensure stable progression
- **Pure C++ Implementation:** No visual scripting/Blueprints for gameplay
- **SINGLE-PLAYER ONLY:** No multiplayer, networking, or replication code
- **NO GAS:** Do NOT use Gameplay Ability System - implement all abilities with simple C++ components
- **UI System:** All UI implemented in C++ using Slate framework
- **Blueprints:** Only for asset references and minimal configuration

**Current Status:** Phase 5 - Arena System ✅ COMPLETED
**Next Session:** Begin Phase 6 - Memory System

=============================================================================

### PHASE 1: COMBAT FOUNDATION (Week 1-2)
**Priority:** CRITICAL - Core Gameplay
**Status:** ✅ COMPLETED

**Goals:**
- Basic attack system working
- Health system functional
- Training dummy for testing
- Player movement adjusted to game requirements

**Tasks:**
1. [✅] Modify ASecondWindCharacter
   - Set MaxWalkSpeed to 300 (currently 500)
   - Remove jump functionality completely
   - Add basic attack input binding (LMB -> IA_Attack)
   - Ensure character faces enemy after animations

2. [✅] Create UCombatComponent
   - Basic attack function (5 base damage)
   - Animation-based cooldown system
   - Hit detection and damage application
   - Integration with character class

3. [✅] Create UHealthComponent
   - 100 HP base system
   - 2-phase player health system
   - Damage interface for receiving hits
   - Death/phase transition logic

4. [✅] Create ATrainingDummy (extends ACharacter)
   - 100 HP, 2 phases structure
   - Basic hit reaction animations (simple initially)
   - Auto-respawn on death functionality
   - Placeholder combat responses
   - Complex training behaviors added later

**Deliverable:** Player can attack training dummy with functional health/damage system
**Testing:** Player attacks reduce dummy health, dummy dies and respawns after 2 phases

=============================================================================

### PHASE 2: BLOCKING SYSTEM (Week 3)
**Priority:** HIGH - Core Combat Mechanic
**Status:** ✅ COMPLETED

**Goals:**
- Directional blocking fully functional
- Mouse delta system working
- Counter-attack windows implemented
- Block animations integrated

**Tasks:**
1. [✅] Create UBlockingComponent
   - RMB hold detection and state management
   - Horizontal mouse delta tracking (1D axis only, vertical ignored)
   - Block direction states (Front/Left/Right) based on horizontal zones
   - 40% damage reduction calculation (no parry system)
   - Block zone threshold adjusted to 0.5 for better center detection

2. [✅] Enhanced Input Integration
   - Create IA_Block input action
   - Mouse horizontal axis for block control (camera stays centered on enemy)
   - Block direction change with horizontal mouse movements only
   - Input buffer system ready for implementation

3. [✅] Counter-Attack System Foundation
   - 0.5 second counter-attack windows
   - Counter window triggers after successful block
   - Visual feedback with debug spheres
   - Integrated with HealthComponent for damage reduction
   - Foundation for hack meter tracking

**Deliverable:** Functional directional blocking with successful counter-attacks
**Testing:** Player can block attacks from different directions and counter-attack

=============================================================================

### PHASE 3: DODGE & MOVEMENT (Week 4)
**Priority:** HIGH - Core Combat Mechanic
**Status:** PENDING

**Goals:**
- Strategic dodge system complete
- Camera lock-on basic functionality
- Strafe movement during combat
- Complete combat triangle (Attack/Block/Dodge)

**Tasks:**
1. [ ] Strategic Dodge Implementation
   - A/S/D hold (0.1s) + Space input combinations
   - Dodge direction logic (left/back/right)
   - Animation-driven movement (no code distance)
   - Counter-attack windows after successful dodges
   - Weak side bonus damage for proper positioning

2. [ ] Camera Lock-On Foundation
   - Create UCameraLockOnComponent
   - Auto-targeting logic within 1500 unit range (1v1 only)
   - No manual toggle or lock break (arena combat design)
   - Strafe movement when locked onto target
   - Character auto-facing enemy with animation exceptions
   - Camera lag for smooth dodge following

3. [ ] Movement System Integration
   - Modify WASD behavior during lock-on
   - A/D becomes strafe/circle movement
   - Seamless transition between free/locked movement

**Deliverable:** Complete basic combat mechanics (Attack/Block/Dodge/Lock-on)
**Testing:** All three combat options work together fluidly

=============================================================================

### PHASE 4: ADVANCED COMBAT (Week 5)
**Priority:** MEDIUM - Enhanced Combat
**Status:** COMPLETED ✓

**Goals:**
- Dash attack system functional ✓
- Hack attack fully implemented ✓
- Counter-attack tracking system ✓
- Complete combat moveset ✓

**Tasks:**
1. [x] Dash Attack System
   - W + Space dash input detection ✓
   - Forward dash movement (using DodgeComponent) ✓
   - Optional LMB leap attack during dash window ✓
   - Basic implementation without animations ✓

2. [x] Hack Attack Implementation
   - Counter-attack tracking system (6-count) ✓
   - Reset logic on 2 unblocked hits (blocked don't count) ✓
   - Massive damage (50) + stun placeholder ✓
   - Visual/audio feedback for hack availability ✓
   - UI debug display (cyan progress indicators) ✓
   - Counter-attacks require LMB during counter windows ✓

**Deliverable:** Full combat moveset with all special abilities ✓
**Testing:** Hack attack becomes available after 6 counters, resets properly ✓

=============================================================================

### PHASE 5A: ARENA SYSTEM - BASIC (Week 6)
**Priority:** HIGH - Game Structure
**Status:** ✅ COMPLETED

**Goals:**
- Game mode and progression structure
- Arena transition system
- Enemy base class with phases
- Fragment earning system

**Tasks:**
1. [✅] Game Mode Implementation
   - Create ASecondWindArenaGameMode (extends AGameModeBase)
   - Arena progression logic and state management
   - Safe zone and training area management

2. [✅] Arena Management System
   - Create AArenaManager for transitions
   - Arena 1-5 basic setup (identical layouts)
   - Safe zone between arenas functionality

3. [✅] Enemy Base Class
   - Create AArenaEnemy (extends ACharacter)
   - Phase system implementation (1-5 phases per arena)
   - Health scaling and phase transitions (100 HP reset)
   - Finisher system with forced waiting animations
   - Glowing weak side visual indicators (placeholder)

4. [✅] Fragment System Foundation
   - Finisher-based fragment earning calculation
   - Cumulative phase rewards (1+2+3+4 = 10 for 4-phase enemy)
   - Fragment counting and persistence preparation

**Deliverable:** Working arena progression with basic enemy system
**Testing:** Can progress through arenas, earn fragments from finishers

=============================================================================

### PHASE 5B: PHYSICAL ROOM SYSTEM (Week 6-7)
**Priority:** HIGH - Enhanced Game Structure
**Status:** PENDING

**Goals:**
- Physical room-based progression (no teleporting)
- Collision-based room transitions
- Door interaction system for enemy spawning
- Linear level progression with safe zones as marketplaces

**Tasks:**
1. [ ] Room Trigger System
   - Create ARoomTrigger (collision volumes for room transitions)
   - OnBeginOverlap handles room entry logic
   - Tracks player progression through rooms
   - Manages room state (visited, cleared, active)

2. [ ] Arena Door System
   - Create AArenaDoor (interactive door actors)
   - Door opening animation/sequence
   - Spawns arena enemy when door opens
   - Respawns defeated enemies on revisit
   - Blocks return path during combat

3. [ ] Physical Room Layout
   - Create ASafeZoneRoom for marketplace areas
   - Update ARoomManager for physical progression
   - Design linear room connections
   - Starting Hub → Arena 1 → Safe Zone 1 → Arena 2 → etc.
   - Each room physically connected (no loading screens)

4. [ ] Safe Zone Marketplace
   - Convert safe zones to marketplace rooms
   - Physical shop interface locations
   - Memory purchase interaction points
   - Visual indicators for available upgrades
   - Fragment display in physical space

5. [ ] Room State Management
   - Track which rooms are cleared
   - Enemy respawn logic for backtracking
   - Save room progression state
   - Lock/unlock door mechanics
   - Visual feedback for room status

**Implementation Details:**
- Player walks through physical spaces (no teleportation)
- Collision volumes at room boundaries trigger transitions
- Doors provide visual/audio feedback and spawn enemies
- Safe zones between each arena serve as marketplaces
- Defeated enemies respawn if player backtracks
- Linear progression ensures player moves forward
- All rooms exist in same level (seamless experience)

**Deliverable:** Physical room-based progression system
**Testing:** Walk through rooms, trigger doors, defeat enemies, use marketplaces

=============================================================================

### PHASE 6: MEMORY SYSTEM (Week 7)
**Priority:** MEDIUM - Meta Progression
**Status:** PENDING

**Goals:**
- Save/load system working
- Memory unlock interface
- First memory implemented
- Persistence between sessions

**Tasks:**
1. [ ] Save/Load Infrastructure
   - Create UFragmentSystem (UGameInstanceSubsystem)
   - Create UMemorySystem (UGameInstanceSubsystem)
   - UE5 save game system integration
   - Persistent fragment and memory data

2. [ ] Memory System Implementation
   - Memory unlock validation system
   - Gameplay effect application framework
   - Safe zone memory spending interface

3. [ ] First Memory: Hack Attack Reduction
   - Reduce hack requirement from 6 to 4 counter-attacks
   - Memory purchase and effect application
   - Save/load memory unlock state

**Deliverable:** Working memory system with hack attack upgrade
**Testing:** Can spend fragments to unlock memory, effect persists between sessions

=============================================================================

### PHASE 7: UI & POLISH (Week 8)
**Priority:** MEDIUM - User Experience
**Status:** PENDING

**Goals:**
- Combat UI implemented
- Basic Slate UI systems
- UI feedback for all mechanics

**Tasks:**
1. [ ] Core Combat UI (Pure C++ Slate)
   - Enemy health bar (top, wide design) - Slate widget
   - Player health bar (bottom-left) - Slate widget
   - Phase indicators for both player and enemy - Slate
   - Fragment counter display - Slate widget
   - Damage numbers below health bar (Elden Ring style) - Slate
   - Counter-attack arrows (left-center, cyan/red states) - Slate
   - Hack meter proper UI (replace debug display)

2. [ ] UI State Management
   - Menu system (main menu, pause menu)
   - Arena transition screens
   - Victory/defeat screens
   - Memory purchase interface

**Deliverable:** Complete UI system with all necessary screens
**Testing:** All UI elements display correctly and update in real-time

=============================================================================

### PHASE 8: ANIMATION SYSTEM (Week 9)
**Priority:** HIGH - Visual Polish
**Status:** PENDING

**Goals:**
- Complete animation integration
- Smooth combat feel
- Visual feedback for all actions

**Tasks:**
1. [ ] Player Animations
   - Attack animations (normal, counter, hack)
   - Block animations (directional)
   - Dodge animations (4 directions)
   - Dash and leap attack animations
   - Hit reactions and death animations
   - Phase transition animations

2. [ ] Enemy Animations
   - Attack animations (combos, heavy attacks)
   - Hit reactions
   - Phase transition animations
   - Death and finisher receive animations

3. [ ] Animation Notifies
   - Damage frame timing
   - Counter window triggers
   - VFX spawn points
   - SFX triggers

**Deliverable:** Fully animated combat system
**Testing:** All animations play correctly with proper timing

=============================================================================

### PHASE 9: SFX & VFX (Week 10)
**Priority:** MEDIUM - Audio/Visual Polish
**Status:** PENDING

**Goals:**
- Complete audio implementation
- Visual effects for all actions
- Game feel enhancement

**Tasks:**
1. [ ] Sound Effects
   - Combat sounds (sword hits, blocks, dodges)
   - Counter-attack audio cues
   - Hack attack charging and execution
   - UI feedback sounds
   - Phase transition audio
   - Ambient arena sounds

2. [ ] Visual Effects
   - Hit impacts and sparks
   - Blood/damage effects
   - Counter-attack window visual indicators
   - Block direction visual feedback
   - Hack attack visual buildup and execution
   - Dodge trails and dash effects
   - Phase transition effects

3. [ ] Game Feel
   - Screen shake on heavy hits
   - Hit pause for impactful attacks
   - Slow motion for counter-attacks
   - Camera effects for special moments

**Deliverable:** Complete audio-visual experience
**Testing:** All effects trigger correctly without performance issues

=============================================================================

### PHASE 10: ENEMY AI (Week 11)
**Priority:** HIGH - Core Gameplay
**Status:** PENDING

**Goals:**
- Intelligent enemy behavior
- Challenging combat encounters
- Phase-based AI changes

**Tasks:**
1. [ ] AI Behavior System
   - State machine for combat decisions
   - Attack pattern selection
   - Player action reading and response
   - Distance management
   - Defensive behavior (blocking, dodging)

2. [ ] Attack Patterns
   - 3-hit combo variations
   - Heavy attack mixups
   - Feint system (start attack, then cancel)
   - Delayed attacks to catch dodges
   - Punish patterns for player mistakes

3. [ ] Phase-Based Behaviors
   - Phase 1: Basic attacks, slow reactions
   - Phase 2: Faster attacks, occasional feints
   - Phase 3: Combo chains, defensive options
   - Phase 4: Aggressive mixups, punish attempts
   - Phase 5: Full moveset, unpredictable patterns

4. [ ] Difficulty Scaling
   - Per-arena AI improvements
   - Reaction time adjustments
   - Attack frequency changes
   - Defense usage probability

**Deliverable:** Challenging and fair enemy AI system
**Testing:** AI provides appropriate challenge without feeling unfair

=============================================================================

### SESSION TRACKING:
**Current Phase:** 5B
**Next Tasks:** Implement physical room system with collision-based transitions
**Completion Status:** 5A/10 phases complete (5B pending)

### NOTES FOR NEXT SESSION:
- Phase 1-5A complete: Combat, Blocking, Dodge/Movement, Special Abilities, Basic Arena System
- Phase 5B planned: Physical room progression with doors and marketplaces
- Need to implement:
  * ARoomTrigger for collision-based transitions
  * AArenaDoor for enemy spawning interactions
  * ASafeZoneRoom for marketplace areas
  * Physical level layout with connected rooms
- Room progression: Starting Hub → Arena 1 → Safe Zone 1 → Arena 2 → etc.
- Safe zones will serve as marketplaces for memory purchases
- Enemies respawn when revisiting defeated arenas
- Phase order: 5B Physical Rooms → Memory → UI → Animation → SFX/VFX → Enemy AI
- Training dummy remains in starting hub