### Second Wind - Implementation Plan

**Development Overview:**
- 11 phases over 12 weeks
- Phase-by-phase tracking for session continuity
- Each phase builds on the previous to ensure stable progression
- **Pure C++ Implementation:** No visual scripting/Blueprints for gameplay
- **SINGLE-PLAYER ONLY:** No multiplayer, networking, or replication code
- **NO GAS:** Do NOT use Gameplay Ability System - implement all abilities with simple C++ components
- **UI System:** All UI implemented in C++ using Slate framework
- **Blueprints:** Only for asset references and minimal configuration

**Current Status:** Phase 8 - Animation System ⏳ NEXT
**Previous:** Phase 7 - UI & Polish ✅ COMPLETED
**Next Session:** Begin Phase 8 - Animation System

=============================================================================

### PHASE 1: COMBAT FOUNDATION (Week 1-2)
**Priority:** CRITICAL - Core Gameplay
**Status:** ✅ COMPLETED

**Goals:**
- Basic attack system working
- Health system functional
- Training dummy for testing
- Player movement adjusted to game requirements

**Tasks:**
1. [✅] Modify ASecondWindCharacter
   - Set MaxWalkSpeed to 300 (currently 500)
   - Remove jump functionality completely
   - Add basic attack input binding (LMB -> IA_Attack)
   - Ensure character faces enemy after animations

2. [✅] Create UCombatComponent
   - Basic attack function (5 base damage)
   - Animation-based cooldown system
   - Hit detection and damage application
   - Integration with character class

3. [✅] Create UHealthComponent
   - 100 HP base system
   - 2-phase player health system
   - Damage interface for receiving hits
   - Death/phase transition logic

4. [✅] Create ATrainingDummy (extends ACharacter)
   - 100 HP, 2 phases structure
   - Basic hit reaction animations (simple initially)
   - Auto-respawn on death functionality
   - Placeholder combat responses
   - Complex training behaviors added later

**Deliverable:** Player can attack training dummy with functional health/damage system
**Testing:** Player attacks reduce dummy health, dummy dies and respawns after 2 phases

=============================================================================

### PHASE 2: BLOCKING SYSTEM (Week 3)
**Priority:** HIGH - Core Combat Mechanic
**Status:** ✅ COMPLETED

**Goals:**
- Directional blocking fully functional
- Mouse delta system working
- Counter-attack windows implemented
- Block animations integrated

**Tasks:**
1. [✅] Create UBlockingComponent
   - RMB hold detection and state management
   - Horizontal mouse delta tracking (1D axis only, vertical ignored)
   - Block direction states (Front/Left/Right) based on horizontal zones
   - 40% damage reduction calculation (no parry system)
   - Block zone threshold adjusted to 0.5 for better center detection

2. [✅] Enhanced Input Integration
   - Create IA_Block input action
   - Mouse horizontal axis for block control (camera stays centered on enemy)
   - Block direction change with horizontal mouse movements only
   - Input buffer system ready for implementation

3. [✅] Counter-Attack System Foundation
   - 0.5 second counter-attack windows
   - Counter window triggers after successful block
   - Visual feedback with debug spheres
   - Integrated with HealthComponent for damage reduction
   - Foundation for hack meter tracking

**Deliverable:** Functional directional blocking with successful counter-attacks
**Testing:** Player can block attacks from different directions and counter-attack

=============================================================================

### PHASE 3: DODGE & MOVEMENT (Week 4)
**Priority:** HIGH - Core Combat Mechanic
**Status:** PENDING

**Goals:**
- Strategic dodge system complete
- Camera lock-on basic functionality
- Strafe movement during combat
- Complete combat triangle (Attack/Block/Dodge)

**Tasks:**
1. [ ] Strategic Dodge Implementation
   - A/S/D hold (0.1s) + Space input combinations
   - Dodge direction logic (left/back/right)
   - Animation-driven movement (no code distance)
   - Counter-attack windows after successful dodges
   - Weak side bonus damage for proper positioning

2. [ ] Camera Lock-On Foundation
   - Create UCameraLockOnComponent
   - Auto-targeting logic within 1500 unit range (1v1 only)
   - No manual toggle or lock break (arena combat design)
   - Strafe movement when locked onto target
   - Character auto-facing enemy with animation exceptions
   - Camera lag for smooth dodge following

3. [ ] Movement System Integration
   - Modify WASD behavior during lock-on
   - A/D becomes strafe/circle movement
   - Seamless transition between free/locked movement

**Deliverable:** Complete basic combat mechanics (Attack/Block/Dodge/Lock-on)
**Testing:** All three combat options work together fluidly

=============================================================================

### PHASE 4: ADVANCED COMBAT (Week 5)
**Priority:** MEDIUM - Enhanced Combat
**Status:** COMPLETED ✓

**Goals:**
- Dash attack system functional ✓
- Hack attack fully implemented ✓
- Counter-attack tracking system ✓
- Complete combat moveset ✓

**Tasks:**
1. [x] Dash Attack System
   - W + Space dash input detection ✓
   - Forward dash movement (using DodgeComponent) ✓
   - Optional LMB leap attack during dash window ✓
   - Basic implementation without animations ✓

2. [x] Hack Attack Implementation
   - Counter-attack tracking system (6-count) ✓
   - Reset logic on 2 unblocked hits (blocked don't count) ✓
   - Massive damage (50) + stun placeholder ✓
   - Visual/audio feedback for hack availability ✓
   - UI debug display (cyan progress indicators) ✓
   - Counter-attacks require LMB during counter windows ✓

**Deliverable:** Full combat moveset with all special abilities ✓
**Testing:** Hack attack becomes available after 6 counters, resets properly ✓

=============================================================================

### PHASE 5A: ARENA SYSTEM - BASIC (Week 6)
**Priority:** HIGH - Game Structure
**Status:** ✅ COMPLETED

**Goals:**
- Game mode and progression structure
- Arena transition system
- Enemy base class with phases
- Fragment earning system

**Tasks:**
1. [✅] Game Mode Implementation
   - Create ASecondWindArenaGameMode (extends AGameModeBase)
   - Arena progression logic and state management
   - Safe zone and training area management

2. [✅] Arena Management System
   - Create AArenaManager for transitions
   - Arena 1-5 basic setup (identical layouts)
   - Safe zone between arenas functionality

3. [✅] Enemy Base Class
   - Create AArenaEnemy (extends ACharacter)
   - Phase system implementation (1-5 phases per arena)
   - Health scaling and phase transitions (100 HP reset)
   - Finisher system with forced waiting animations
   - Glowing weak side visual indicators (placeholder)

4. [✅] Fragment System Foundation
   - Finisher-based fragment earning calculation
   - Cumulative phase rewards (1+2+3+4 = 10 for 4-phase enemy)
   - Fragment counting and persistence preparation

**Deliverable:** Working arena progression with basic enemy system
**Testing:** Can progress through arenas, earn fragments from finishers

=============================================================================

### PHASE 5B: PHYSICAL ROOM SYSTEM (Week 6-7)
**Priority:** HIGH - Enhanced Game Structure
**Status:** ✅ COMPLETED

**Goals:**
- Physical room-based progression (no teleporting)
- Proximity-based door interactions (2-second hold)
- Simple linear progression through connected spaces
- Safe zone corridors as marketplaces between arenas

**Refactoring Tasks:**
1. [✅] Remove Phase 5A Placeholder Code
   - Removed teleportation logic from ArenaManager
   - Removed debug keys (1 and 2) for arena transitions
   - Simplified GameMode (no complex state management)
   - Removed spawn/despawn location arrays
   - Kept only: FragmentComponent, ArenaEnemy base class

**New Implementation Tasks:**
2. [✅] Arena Door System
   - Created AArenaDoor (interactive door with proximity detection)
   - 2-second proximity requirement implemented
   - Door opening sequence working
   - Combat-locked exit doors (must defeat enemy)
   - Door type system (ArenaEntry, ArenaExit, SafeZone)

3. [✅] Safe Zone Corridors
   - Created ASafeZoneCorridor (marketplace hallways)
   - Healing to full health on entry
   - Linear corridor design between arenas
   - No combat in corridors

4. [✅] Physical Level Layout
   - SimplifiedArenaSystem spawns rooms dynamically
   - Starting Hub (training dummy) → Door 1 → Arena 1 → etc.
   - Each room physically exists (no teleporting)
   - Clear progression flow
   - Doors lock/unlock based on combat state

5. [✅] Simplified Enemy Management
   - Only one arena enemy exists at a time
   - Current enemy spawns when entering arena
   - Previous enemy despawns automatically
   - No complex respawn logic
   - Enemy tied to specific arena room

**Key Simplifications from 5A:**
- No teleportation (walk everywhere)
- No complex state machines (proximity triggers handle flow)
- Single enemy at a time (no multi-enemy management)
- Linear progression (no backtracking complexity)
- Physical space tells the story (no abstract systems)

**Deliverable:** Clean, physical room-based progression ✅ DELIVERED
**Testing:** Walk to door → Wait 2 seconds → Door opens → Enter arena → Defeat enemy → Walk to safe zone → Get healed → Continue

=============================================================================

### PHASE 5C: PRE-PLACED LEVEL DESIGN SYSTEM (Week 7)
**Priority:** HIGH - Professional Level Design
**Status:** 📋 PLANNED

**Goals:**
- Transform runtime-spawned system to editor-placed geometry
- Full visual control over level layout in Unreal Editor
- Discovery-based management (find pre-placed actors)
- Support for non-linear level designs
- Maintain all Phase 5B functionality

**New Classes to Create:**
1. [ ] AArenaZone
   - Defines combat area boundaries
   - Zone number and name properties
   - References to entry/exit doors
   - Enemy spawn point management
   - Combat state tracking

2. [ ] AEnemySpawnPoint
   - Visual spawn location markers
   - Enemy type selection
   - Phase count override option
   - Training dummy flag
   - Rotation control

3. [ ] ALevelLayoutManager (Replaces SimplifiedArenaSystem)
   - Discovers all pre-placed actors on BeginPlay
   - Manages enemy spawning only (no geometry spawning)
   - Tracks arena progression
   - Updates door states based on combat
   - Validates level setup

**Implementation Tasks:**
1. [ ] Discovery System
   - Find all ArenaZones in level
   - Find all EnemySpawnPoints
   - Find all Doors and Corridors
   - Link components together
   - Validate connections

2. [ ] Zone Management
   - Player overlap detection
   - Zone activation/deactivation
   - Combat state per zone
   - Door state updates

3. [ ] Spawn Point System
   - Spawn enemies at designated points
   - Clear spawn points on zone change
   - Support multiple enemy types
   - Respawn training dummy

**Level Design Workflow:**
1. Place ALevelLayoutManager in level
2. Place AArenaZone actors for each combat area
3. Scale zone bounds to desired size
4. Place AEnemySpawnPoint inside each zone
5. Place AArenaDoor actors between zones
6. Place ASafeZoneCorridor actors
7. Link references in editor
8. Test progression

**Benefits:**
- Visual level design in editor
- Custom arena shapes and sizes
- Non-linear progression possible
- Easy testing and iteration
- Professional workflow

**Deliverable:** Editor-friendly level design system
**Testing:** Place actors in editor → Play in editor → System discovers layout → Combat and progression work

**See Phase5C_Plan.md for detailed implementation guide**

=============================================================================

### PHASE 6: MEMORY SYSTEM (Week 8)
**Priority:** MEDIUM - Meta Progression
**Status:** ✅ COMPLETED

**Goals:**
- Save/load system working
- Memory unlock interface
- First memory implemented
- Persistence between sessions

**Tasks:**
1. [ ] Save/Load Infrastructure
   - Create UFragmentSystem (UGameInstanceSubsystem)
   - Create UMemorySystem (UGameInstanceSubsystem)
   - UE5 save game system integration
   - Persistent fragment and memory data

2. [ ] Memory System Implementation
   - Memory unlock validation system
   - Gameplay effect application framework
   - Safe zone memory spending interface

3. [ ] First Memory: Hack Attack Reduction
   - Reduce hack requirement from 6 to 4 counter-attacks
   - Memory purchase and effect application
   - Save/load memory unlock state

**Deliverable:** Working memory system with hack attack upgrade
**Testing:** Can spend fragments to unlock memory, effect persists between sessions

=============================================================================

### PHASE 7: UI & POLISH (Week 8)
**Priority:** MEDIUM - User Experience
**Status:** ✅ COMPLETED

**Goals:**
- Combat UI implemented ✅
- Basic Slate UI systems ✅
- UI feedback for all mechanics ✅

**Tasks:**
1. [✅] Core Combat UI (Pure C++ Slate)
   - Enemy health bar (top, wide design) - Slate widget ✅
   - Player health bar (bottom-left) - Slate widget ✅
   - Phase indicators for both player and enemy - Slate ✅
   - Fragment counter display - Slate widget ✅
   - Damage numbers below health bar (Elden Ring style) - Slate ✅
   - Counter-attack arrows (left-center, cyan/red states) - Slate ✅
   - Hack meter proper UI (replace debug display) ✅

2. [✅] UI State Management
   - Combat HUD fully functional ✅
   - Memory shop interface (Phase 6) ✅
   - Real-time UI updates ✅
   - All combat UI elements tested ✅

**Deliverable:** Complete UI system with all necessary screens ✅
**Testing:** All UI elements display correctly and update in real-time ✅

=============================================================================

### PHASE 8: ANIMATION SYSTEM (Week 9)
**Priority:** HIGH - Visual Polish
**Status:** PENDING

**Goals:**
- Complete animation integration
- Smooth combat feel
- Visual feedback for all actions

**Tasks:**
1. [ ] Player Animations
   - Attack animations (normal, counter, hack)
   - Block animations (directional)
   - Dodge animations (4 directions)
   - Dash and leap attack animations
   - Hit reactions and death animations
   - Phase transition animations

2. [ ] Enemy Animations
   - Attack animations (combos, heavy attacks)
   - Hit reactions
   - Phase transition animations
   - Death and finisher receive animations

3. [ ] Animation Notifies
   - Damage frame timing
   - Counter window triggers
   - VFX spawn points
   - SFX triggers

**Deliverable:** Fully animated combat system
**Testing:** All animations play correctly with proper timing

=============================================================================

### PHASE 9: BLESSING SYSTEM (TEMPORARY UPGRADES) (Week 10)
**Priority:** HIGH - Core Roguelike Mechanic
**Status:** PENDING

**Goals:**
- Temporary upgrade system (lost on death)
- Post-combat blessing selections
- Blessing categories and rarities
- Integration with existing systems

**Tasks:**
1. [ ] Blessing System Infrastructure
   - Create UBlessingSystem (UGameInstanceSubsystem)
   - Create UBlessingData (data asset structure)
   - Create UBlessingComponent (player component)
   - Clear blessings on death/run reset

2. [ ] Blessing Categories Implementation
   - Offensive blessings (damage, attack speed, crit)
   - Defensive blessings (block, dodge, recovery)
   - Utility blessings (fragments, movement, synergy)
   - Rarity system (Common 60%, Rare 30%, Epic 10%)

3. [ ] Blessing Selection UI (Pure Slate)
   - Post-combat selection screen
   - Choose 1 of 3 random blessings
   - Skip option available
   - Current blessing display
   - Stack indicators (max 3 per type)

4. [ ] Integration Points
   - ArenaZone: Trigger selection after combat
   - CombatComponent: Apply damage modifiers
   - BlockingComponent: Apply block modifiers
   - DodgeComponent: Apply dodge modifiers
   - HackComponent: Apply hack modifiers
   - FragmentComponent: Apply reward modifiers

**Blessing Examples:**
- Razor Edge: +10% attack damage
- Iron Guard: +10% block reduction
- Fragment Finder: +20% fragment rewards
- Hack Charge: Start with 2 hack counters
- Counter Master: +50% counter damage

**Deliverable:** Complete blessing system with 15+ unique blessings
**Testing:** Blessings apply correctly, clear on death, stack properly

**See Phase9_Plan.md for detailed implementation guide**

=============================================================================

### PHASE 10: SFX & VFX (Week 11)
**Priority:** MEDIUM - Audio/Visual Polish
**Status:** PENDING

**Goals:**
- Complete audio implementation
- Visual effects for all actions
- Game feel enhancement

**Tasks:**
1. [ ] Sound Effects
   - Combat sounds (sword hits, blocks, dodges)
   - Counter-attack audio cues
   - Hack attack charging and execution
   - UI feedback sounds
   - Phase transition audio
   - Ambient arena sounds

2. [ ] Visual Effects
   - Hit impacts and sparks
   - Blood/damage effects
   - Counter-attack window visual indicators
   - Block direction visual feedback
   - Hack attack visual buildup and execution
   - Dodge trails and dash effects
   - Phase transition effects

3. [ ] Game Feel
   - Screen shake on heavy hits
   - Hit pause for impactful attacks
   - Slow motion for counter-attacks
   - Camera effects for special moments

**Deliverable:** Complete audio-visual experience
**Testing:** All effects trigger correctly without performance issues

=============================================================================

### PHASE 11: ENEMY AI (Week 12)
**Priority:** HIGH - Core Gameplay
**Status:** PENDING

**Goals:**
- Intelligent enemy behavior
- Challenging combat encounters
- Phase-based AI changes

**Tasks:**
1. [ ] AI Behavior System
   - State machine for combat decisions
   - Attack pattern selection
   - Player action reading and response
   - Distance management
   - Defensive behavior (blocking, dodging)

2. [ ] Attack Patterns
   - 3-hit combo variations
   - Heavy attack mixups
   - Feint system (start attack, then cancel)
   - Delayed attacks to catch dodges
   - Punish patterns for player mistakes

3. [ ] Phase-Based Behaviors
   - Phase 1: Basic attacks, slow reactions
   - Phase 2: Faster attacks, occasional feints
   - Phase 3: Combo chains, defensive options
   - Phase 4: Aggressive mixups, punish attempts
   - Phase 5: Full moveset, unpredictable patterns

4. [ ] Difficulty Scaling
   - Per-arena AI improvements
   - Reaction time adjustments
   - Attack frequency changes
   - Defense usage probability

**Deliverable:** Challenging and fair enemy AI system
**Testing:** AI provides appropriate challenge without feeling unfair

=============================================================================

### SESSION TRACKING:
**Current Phase:** 7
**Next Tasks:** Complete UI & Polish implementation
**Completion Status:** 6/11 phases complete (Phase 7 in progress)

### NOTES FOR NEXT SESSION:
- Phase 1-6 complete: Combat, Blocking, Dodge/Movement, Special Abilities, Arena System, Memory System
- Phase 7 in progress: UI & Polish (Combat HUD implemented)
- Phase 8 planned: Animation System
- Phase 9 planned: Blessing System (temporary upgrades)
- Phase 10 planned: SFX & VFX
- Phase 11 planned: Enemy AI
- Key distinction: Memories are permanent upgrades (purchased with fragments)
- Blessings are temporary upgrades (lost on death, earned after combat)
- Total phases increased from 10 to 11 to accommodate blessing system